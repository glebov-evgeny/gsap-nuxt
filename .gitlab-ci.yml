stages:
  - build
  - deploy
  - test

build:dev:
  stage: build
  tags:
    - shell-linux
  variables:
    CI_DEBUG_TRACE: 'false'
  only:
    refs:
      - '/^OGM-.*$/'
      - '/^release-.*$/'
      - '/^hotfix-.*$/'
  except:
    - schedules
    - master
  script:
    - build_image

deploy:dev:
  stage: deploy
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    url: 'https://${CI_COMMIT_REF_SLUG}-${CI_PROJECT_ID}.${DEV_DOMAIN}${PRODUCTION_PATH}'
    on_stop: destroy:dev
  variables:
    CI_DEBUG_TRACE: 'false'
  tags:
    - shell-linux
  only:
    refs:
      - '/^OGM-.*$/'
      - '/^release-.*$/'
      - '/^hotfix-.*$/'
  except:
    - schedules
    - master
  script:
    - deploy_image

test:dev:
  stage: test
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    on_stop: destroy:dev
  variables:
    CI_DEBUG_TRACE: 'false'
  tags:
    - shell-linux
  only:
    refs:
      - '/^OGM-.*$/'
      - '/^release-.*$/'
      - '/^hotfix-.*$/'
  except:
    - schedules
    - master
  script:
    - test_app

destroy:dev:
  stage: test
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    action: stop
  variables:
    CI_DEBUG_TRACE: 'false'
    GIT_STRATEGY: none
  only:
    refs:
      - '/^OGM-.*$/'
      - '/^release-.*$/'
      - '/^hotfix-.*$/'
  except:
    - schedules
    - master
  tags:
    - shell-linux
  when: manual
  script:
    - destroy_env

build:prod:
  stage: build
  tags:
    - shell-linux
  variables:
    CI_DEBUG_TRACE: 'false'
  only:
    - master
  except:
    refs:
      - schedules
    variables:
      - $API_RUN_VARIABLE
  script:
    - build_image

deploy:prod:
  stage: deploy
  environment:
    name: 'production'
    url: '${PRODUCTION_URL}${PRODUCTION_PATH}'
  variables:
    CI_DEBUG_TRACE: 'false'
  only:
    - master
  except:
    refs:
      - schedules
    variables:
      - $API_RUN_VARIABLE
  tags:
    - shell-linux
  script:
    - deploy_image

test:prod:
  stage: test
  environment:
    name: 'production'
  tags:
    - shell-linux
  only:
    - master
  except:
    refs:
      - schedules
    variables:
      - $API_RUN_VARIABLE
  script:
    - test_app

# ---------------------------------------------------------------------------
.auto_devops: &auto_devops |
  # Auto DevOps variables and functions

  export WERF_RELEASES_HISTORY_MAX=2
  export WERF_ENABLE_PROCESS_EXTERMINATOR=1
  export WERF_SYNCHRONIZATION=:local

  export DEVS=$( echo "${CI_COMMIT_REF_SLUG}" | grep '^ogm-*\|^release-*\|^hotfix-*' | wc -l)
  if [ ${DEVS} -eq 1 ]
  then 
    export ENV_NAME="dev"
    export ENV_NAME_FULL="development"
    export KUBE_CONTEXT="${KUBE_CONTEXT_DEV}"
    export APP_NAMESPACE="${CI_COMMIT_REF_SLUG}-${CI_PROJECT_PATH_SLUG}"
    export APP_URL="https://${CI_COMMIT_REF_SLUG}-${CI_PROJECT_ID}.${DEV_DOMAIN}"
    export WERF_REPO="${REGISTRY_NAME_DEV}/${CI_PROJECT_PATH_SLUG}"
    export REPOSITORY_NAME="${REPOSITORY_NAME_DEV}"
  else
    if [ "${PRODUCTION_URL}" == "" ]
    then
      echo "PRODUCTION_URL not set!"
      exit 1
    fi
    export ENV_NAME="prod"
    export ENV_NAME_FULL="production"
    export KUBE_CONTEXT="${KUBE_CONTEXT_PROD}"
    export APP_NAMESPACE="${CI_PROJECT_PATH_SLUG}"
    export APP_URL="${PRODUCTION_URL}"
    export WERF_REPO="${REGISTRY_NAME_PROD}/${CI_PROJECT_PATH_SLUG}"
    export REPOSITORY_NAME="${REPOSITORY_NAME_PROD}"
  fi

  export WERF_KUBE_CONTEXT="${KUBE_CONTEXT}"

  export APP_NAMESPACE=$( echo ${APP_NAMESPACE} | cut -c -52 | sed 's/\-$//' )

  build_image() {
    werf version; pwd; set -x
    
    source $(werf ci-env gitlab --as-file)
    werf build
  }

  destroy_env() {
    werf version; pwd; set -x

    source $(werf ci-env gitlab --as-file)
    werf dismiss --namespace ${APP_NAMESPACE} --release ${APP_NAMESPACE} --with-namespace=true
  }

  cleanup() {
    werf version; pwd; set -x

    source $(werf ci-env gitlab --as-file)
    werf cleanup
  }

  deploy_image() {
    werf version; pwd; set -x

    kubectl get ns ${APP_NAMESPACE} --context="${KUBE_CONTEXT}" || kubectl create namespace ${APP_NAMESPACE} --context="${KUBE_CONTEXT}"

    kubectl get secret docker-registry -n kube-system -o json --context="${KUBE_CONTEXT}" |
      jq ".metadata.namespace = \"${APP_NAMESPACE}\"|
      del(.metadata.annotations,.metadata.creationTimestamp,.metadata.resourceVersion,.metadata.selfLink,.metadata.uid)" |
      kubectl apply -f - --context="${KUBE_CONTEXT}"

    kubectl get secret docker-registry-dev -n kube-system -o json --context="${KUBE_CONTEXT}" |
      jq ".metadata.namespace = \"${APP_NAMESPACE}\"|
      del(.metadata.annotations,.metadata.creationTimestamp,.metadata.resourceVersion,.metadata.selfLink,.metadata.uid)" |
      kubectl apply -f - --context="${KUBE_CONTEXT}"

    source $(werf ci-env gitlab --as-file)
    werf converge \
      --auto-rollback=true \
      --skip-build \
      --namespace ${APP_NAMESPACE} \
      --release ${APP_NAMESPACE} \
      --set "global.env=${CI_ENVIRONMENT_SLUG}" \
      --set "global.ci_url=$(echo ${APP_URL} | cut -d / -f 3)" \
      --set "global.ci_path=${PRODUCTION_PATH}" \
      --set "global.env_name=${ENV_NAME}" \
      --set "global.mon_probe=${MON_PROBE}" \
      --set "global.mon_code=${MON_CODE}" \
      --set "global.www_redirect=${WWW_REDIRECT}" \
      --add-annotation "synergy.ru/gitlab.url=${CI_PROJECT_URL}" \
      --add-annotation "synergy.ru/gitlab.id=${CI_PROJECT_ID}"

      cleanup
  }

  test_app() {
    echo "Run Test"
  }

before_script:
  - *auto_devops
